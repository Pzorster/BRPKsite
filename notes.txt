Since I've been working on and off with this project I will write this file to remember
Where files are connected. Within files comments will be used to understand content.

From chatGPT
1. Django Project Structure:
manage.py: A command-line tool that lets you interact with the project (e.g., run the server, migrate the database). It’s typically found in the root of your project.
project_name/: This is the main project folder (often named the same as your project). It contains the settings, URLs, and WSGI/ASGI configuration files.
settings.py: Contains all the settings for your project (database configuration, middleware, installed apps, etc.).
urls.py: Contains URL patterns that link views to specific URLs. It includes the root URLconf, which can delegate to app-specific URLconfs.
wsgi.py / asgi.py: These files are used for deploying the application, depending on whether you're using WSGI or ASGI for asynchronous support.
__init__.py: Marks this directory as a Python package.
2. Django App Structure:
Each app in Django is a self-contained module that handles a specific part of your project (e.g., user authentication, blog). Each app typically has its own folder with the following structure:

migrations/: Directory that stores database migrations for the app.
models.py: Contains the models for your app, which define the structure of the database tables.
views.py: Contains the views for your app, which define the logic for handling requests and rendering responses.
urls.py: This file contains URL patterns specific to this app. It's included in the project's main urls.py.
admin.py: Used to configure your models to appear in the Django admin interface.
apps.py: Contains the app configuration class (useful for app-specific settings).
tests.py: Contains test cases for this app.
__init__.py: Marks this directory as a Python package.
3. Templates and Static Files:
templates/: A directory where you put your HTML files. This can be inside each app or globally for the whole project (depending on the TEMPLATES setting in settings.py).
For example, project_name/templates/ or app_name/templates/.
static/: This folder contains static files (CSS, JavaScript, images) that are served directly to the browser. This can be inside each app or globally.
For example, project_name/static/ or app_name/static/.
4. Database Models & Migrations:
models.py: Define your models in this file. Models represent tables in the database.
migrations/: Whenever you change a model, you create a migration to update the database schema. Use python manage.py makemigrations to create migration files and python manage.py migrate to apply them.
5. URLs:
In the project’s urls.py, you define the main URL patterns for the entire project.
In each app’s urls.py, you define app-specific URL patterns. These are included in the project’s urls.py.


My own clues:
Views = functions that handle requests
python manage.py  calls up the command line tool(interface between python and django) manage.py. This allows you to run django specific commands through manage.py
you can open it as a shell by writing python manage.py shell
but most of the time you run commands that have automated actions
like makemigrations, which prepares the files you want to change it in the db, and migrate, which enacts the change
Other useful commands:
python manage.py runserver → Starts the Django development server.
python manage.py createsuperuser → Creates an admin account.
python manage.py showmigrations → Lists all migrations and their status.
python manage.py check → Checks for errors in your Django project before running migrations.

Current super-user: pzor with usual pap old number